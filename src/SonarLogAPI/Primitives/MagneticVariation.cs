namespace SonarLogAPI.Primitives
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;

    /* Module to calculate magnetic variation and field given position,
    **               altitude, and date
    ** Implements the NIMA (formerly DMA) WMM and IGRF models
    **
    **    For WMM coefficients (WMM.COF file):
    **    https://www.ngdc.noaa.gov/geomag/WMM/soft.shtml
    **    For IGRF/DGRF coefficients:
    **    http://swdcdb.kugi.kyoto-u.ac.jp/igrf/coef/igrfall.d
    **
    ** Copyright (C) 2000  Edward A Williams <Ed_Williams@compuserve.com>
    ** C# Port by Michael Coyle <Michael.Coyle@BlueToque.ca>,
    **
    **  The routine uses a spherical harmonic expansion of the magnetic
    ** potential up to twelfth order, together with its time variation, as
    ** described in Chapter 4 of "Geomagnetism, Vol 1, Ed. J.A.Jacobs,
    ** Academic Press (London 1987)". The program first converts geodetic
    ** coordinates (lat/long on elliptic earth and altitude) to spherical
    ** geocentric (spherical lat/long and radius) coordinates. Using this,
    ** the spherical (B_r, B_theta, B_phi) magnetic field components are
    ** computed from the model. These are finally referred to surface (X, Y,
    ** Z) coordinates.
    **
    **   Fields are accurate to better than 200nT, variation and dip to
    ** better than 0.5 degrees, with the exception of the declination near
    ** the magnetic poles (where it is ill-defined) where the error may reach
    ** 4 degrees or more.
    **
    **   Variation is undefined at both the geographic and  
    ** magnetic poles, even though the field itself is well-behaved. To
    ** avoid the routine blowing up, latitude entries corresponding to
    ** the geographic poles are slightly offset. At the magnetic poles,
    ** the routine returns zero variation.
    **
    ** HISTORY
    ** Adapted from EAW Excel 3.0 version 3/27/94 EAW
    ** Recoded in C++ by Starry Chan
    ** WMM95 added and rearranged in ANSI-C EAW 7/9/95
    ** Put shell around program and made Borland & GCC compatible EAW 11/22/95
    ** IGRF95 added 2/96 EAW
    ** WMM2000 IGR2000 added 2/00 EAW
    ** Released under GPL  3/26/00 EAW
    ** Adaptions and modifications for the SimGear project  3/27/2000 CLO
    ** Removed all pow() calls and made static roots[,] arrays to
    ** save many sqrt() calls on subsequent invocations
    ** 3/28/2000  Norman Vine -- nhv@yahoo.com
    ** Put in some bullet-proofing to handle magnetic and geographic poles.
    ** 3/28/2000 EAW
    ** Added missing comment close, the lack of which caused the altitude 
    ** correction to be omitted.
    ** 01/31/01 Jim Seymour (jseymour@LinxNet.com)
    ** 23/01/13 POrt to C# (michael.coyle@BlueToque.ca)
	** 16/09/2017 Unit tests, some refactoring, WMM2015 coeffs, caching. Ivan Bagrich(ivan@bagrich.ru)
    **
    ** This program is free software; you can redistribute it and/or
    ** modify it under the terms of the GNU General Public License as
    ** published by the Free Software Foundation; either version 2 of the
    ** License, or (at your option) any later version.
    **
    ** This program is distributed in the hope that it will be useful, but
    ** WITHOUT ANY WARRANTY; without even the implied warranty of
    ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    ** General Public License for more details.
    **
    ** You should have received a copy of the GNU General Public License
    ** along with this program; if not, write to the Free Software
    ** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
    **
    */

    public class MagneticVariation
    {

        public enum MagneticVariationModels : byte
        {
            IGRF90,
            WMM85,
            WMM90,
            WMM95,
            IGRF95,
            WMM2000,
            IGRF2000,
            WMM2005,
            IGRF2005,
            WMM2010,
            IGRF2010,
            WMM2015
        }

        #region statics
        const double _earthEquatorialRadius = 6378.16;   /* major radius (km) IAU66 ellipsoid */
        const double _earthWPolarRadius = 6378.16 * (1.0 - 1.0 / 298.25);
        /* minor radius b=a*(1-f) */
        const double _earthMeanRadius = 6371.2;  /* "mean radius" for spherical harmonic expansion */

        /* IGRF90 constants */
        static readonly double[,] _gnmIgrf90 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-29775.4, -1851, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-2135.8, 3058.2, 1693.2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {1314.6, -2240.2, 1245.6, 806.5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {938.9, 782.3, 323.9, -422.7, 141.7, 0, 0, 0, 0, 0, 0, 0, 0},
            {-211, 352.5, 243.8, -110.8, -165.6, -37, 0, 0, 0, 0, 0, 0, 0},
            {60.7, 63.9, 60.4, -177.5, 2, 16.7, -96.3, 0, 0, 0, 0, 0, 0},
            {76.6, -64.2, 3.7, 27.5, 0.9, 5.7, 9.8, -0.5, 0, 0, 0, 0, 0},
            {22.4, 5.1, -0.9, -10.8, -12.4, 3.8, 3.8, 2.6, -6, 0, 0, 0, 0},
            {4.4, 9.9, 0.8, -12, 9.3, -3.9, -1.4, 7.3, 1.5, -5.5, 0, 0, 0},
            {-3.6, -3.9, 2.4, -5.3, -2.4, 4.4, 3, 1.2, 2.2, 2.9, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        };

        static readonly double[,] _hnmIgrf90 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 5410.9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -2277.7, -380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -286.5, 293.3, -348.5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 248.1, -239.5, 87, -299.4, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 47.2, 153.5, -154.4, -69.2, 97.7, 0, 0, 0, 0, 0, 0, 0},
            {0, -15.8, 82.7, 68.3, -52.5, 1.8, 26.9, 0, 0, 0, 0, 0, 0},
            {0, -81.1, -27.3, 0.6, 20.4, 16.4, -22.6, -5, 0, 0, 0, 0, 0},
            {0, 9.7, -19.9, 7.1, -22.1, 11.9, 11, -16, -10.7, 0, 0, 0, 0},
            {0, -20.8, 15.4, 9.5, -5.7, -6.4, 8.6, 9.1, -6.6, 1.9, 0, 0, 0},
            {0, 1.3, 0.4, 3.1, 5.6, -4.2, -0.5, -1.5, 3.8, -0.5, -6.2, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        static readonly double[,] _gtnmIgrf90 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {18, 10.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-12.9, 2.4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {3.3, -6.7, 0, -5.9, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0.5, 0.6, -7, 0.5, -5.5, 0, 0, 0, 0, 0, 0, 0, 0},
            {0.6, -0.1, -1.6, -3.1, 0, 2.3, 0, 0, 0, 0, 0, 0, 0},
            {1.3, -0.2, 1.8, 1.3, -0.2, 0.1, 1.2, 0, 0, 0, 0, 0, 0},
            {0.6, -0.5, -0.3, 0.6, 1.6, 0.2, 0.2, 0.3, 0, 0, 0, 0, 0},
            {0.2, -0.7, -0.2, 0.1, -1.1, 0, 0, -0.5, -0.6, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        static readonly double[,] _htnmIgrf90 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -16.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -15.8, -13.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 4.4, 1.6, -10.6, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 2.6, 1.8, 3.1, -1.4, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -0.1, 0.5, 0.4, 1.7, 0.4, 0, 0, 0, 0, 0, 0, 0},
            {0, 0.2, -1.3, 0, -0.9, 0.5, 1.2, 0, 0, 0, 0, 0, 0},
            {0, 0.6, 0.2, 0.8, -0.5, -0.2, 0, 0, 0, 0, 0, 0, 0},
            {0, 0.5, -0.2, 0.3, 0.3, 0.4, -0.5, -0.3, 0.6, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        /* IGRF95 */
        static readonly double[,] _gnmIgrf95 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-29682.0, -1789.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-2197.0, 3074.0, 1685.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {1329.0, -2268.0, 1249.0, 769.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {941.0, 782.0, 291.0, -421.0, 116.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-210.0, 352.0, 237.0, -122.0, -167.0, -26.0, 0.0, 0.0, 0.0, 0.0,0.0,0.0,0.0},
            {66.0, 64.0, 65.0, -172.0, 2.0, 17.0, -94.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {78.0, -67.0, 1.0, 29.0, 4.0, 8.0, 10.0, -2.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {24.0, 4.0, -1.0, -9.0, -14.0, 4.0, 5.0, 0.0, -7.0, 0.0,0.0, 0.0, 0.0},
            {4.0, 9.0, 1.0, -12.0, 9.0, -4.0, -2.0, 7.0, 0.0, -6.0, 0.0, 0.0, 0.0},
            {-3.0, -4.0, 2.0, -5.0, -2.0, 4.0, 3.0, 1.0, 3.0, 3.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0}
        };

        static readonly double[,] _hnmIgrf95 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 5318.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, -2356.0, -425.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, -263.0, 302.0, -406.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 262.0, -232.0, 98.0, -301.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 44.0, 157.0, -152.0, -64.0, 99.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, -16.0, 77.0, 67.0, -57.0, 4.0, 28.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, -77.0, -25.0, 3.0, 22.0, 16.0, -23.0, -3.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 12.0, -20.0, 7.0, -21.0, 12.0, 10.0, -17.0, -10.0,0.0, 0.0, 0.0, 0.0},
            {0.0, -19.0, 15.0, 11.0, -7.0, -7.0, 9.0, 7.0, -8.0, 1.0, 0.0, 0.0, 0.0},
            {0.0, 2.0, 1.0, 3.0, 6.0, -4.0, 0.0, -2.0, 3.0, -1.0, -6.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0}
        };

        static readonly double[,] _gtnmIgrf95 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {17.6, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {-13.2, 3.7, -0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {1.5, -6.4, -0.2, -8.1, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.8, 0.9, -6.9, 0.5, -4.6, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.8, 0.1, -1.5, -2.0, -0.1, 2.3, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.5, -0.4, 0.6, 1.9, -0.2, -0.2, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {-0.2, -0.8, -0.6, 0.6, 1.2, 0.1, 0.2, -0.6, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.3, -0.2, 0.1, 0.4, -1.1, 0.3, 0.2, -0.9, -0.3, 0.0,0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0}
        };

        static readonly double[,] _htnmIgrf95 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, -18.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, -15.0, -8.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 4.1, 2.2, -12.1, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 1.8, 1.2, 2.7, -1.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.2, 1.2, 0.3, 1.8, 0.9, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.3, -1.6, -0.2, -0.9, 1.0, 2.2, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.8, 0.2, 0.6, -0.4, 0.0, -0.3, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.4, -0.2, 0.2, 0.7, 0.0, -1.2, -0.7, -0.6, 0.0,0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0}
        };

        /*WMM85 constants */
        static readonly double[,] _gnmWmm85 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-29879.8, -1903.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-2070.6, 3040.8, 1696.7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {1303.9, -2203, 1241.7, 839.4, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {933.8, 781.8, 359, -424.5, 164.5, 0, 0, 0, 0, 0, 0, 0, 0},
            {-216.4, 353, 254.3, -93.7, -157.5, -45.2, 0, 0, 0, 0, 0, 0, 0},
            {53.2, 63.8, 51.3, -188.4, 3.3, 20.3, -101.7, 0, 0, 0, 0, 0, 0},
            {76.9, -60.7, 0.7, 25.4, -8.1, 6.9, 7, -4.4, 0, 0, 0, 0, 0},
            {18.4, 5.1, 1.2, -12, -9.1, 0.1, 4.7, 6.5, -9.5, 0, 0, 0, 0},
            {5.7, 10.9, 0.9, -12.2, 9.5, -3.3, -1, 6.5, 1.5, -4.8, 0, 0, 0},
            {-3.4, -4.7, 2.5, -5.5, -2.1, 4.6, 3.2, 0.6, 1.9, 2.8, -0.2, 0, 0},
            {2.3, -0.8, -2, 2.1, 0.2, -0.4, -0.4, 1.6, 1.5, -0.7, 2.3, 3.5, 0},
            {-1.8, 0, 0.1, -0.3, 0.5, 0.5, -0.6, -0.4, 0, -0.5, 0, 0.7, -0.2}};

        static readonly double[,] _hnmWmm85 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 5490.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -2189.1, -312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -310.3, 282.6, -299.2, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 227.2, -246.7, 72.5, -299.1, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 43.4, 148.2, -154.8, -71.8, 91.5, 0, 0, 0, 0, 0, 0, 0},
            {0, -12.3, 87.9, 67.8, -51.1, -4, 20.8, 0, 0, 0, 0, 0, 0},
            {0, -80.1, -25.9, -0.9, 21.6, 18.5, -20, -7.7, 0, 0, 0, 0, 0},
            {0, 3.8, -20.2, 5, -24.2, 12.2, 7.6, -16.3, -10.9, 0, 0, 0, 0},
            {0, -20.8, 15.8, 9, -5, -6.4, 9.1, 9.9, -5.8, 2.3, 0, 0, 0},
            {0, 1.2, 0.4, 2.5, 5.6, -4.4, -0.5, -1.6, 3.7, -0.5, -6.1, 0, 0},
            {0, 1.3, 2, -1.1, -2.8, 0.7, -0.1, -2.4, -0.4, -1.5, -1.5, 0.7, 0},
            {0, 0.3, 0.6, 2.5, -1.7, 0.3, 0.2, -0.1, 0.1, 0.1, -1.4, 0.4, 0.7}};

        static readonly double[,] _gtnmWmm85 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {21.9, 10.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-11.2, 1.8, 9.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {8.3, -2, -0.6, 2.4, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-1.2, 0.1, -9.7, -1.7, -9.3, 0, 0, 0, 0, 0, 0, 0, 0},
            {1.4, -0.5, -1.2, -2.2, 0.9, 0, 0, 0, 0, 0, 0, 0, 0},
            {3.1, 0, 1.8, -0.2, -0.4, 2.4, 1.8, 0, 0, 0, 0, 0, 0},
            {-0.1, -0.8, -1.2, 1.1, 0, 0.6, -1.8, -1.2, 0, 0, 0, 0, 0},
            {0.2, 0, 0.7, 0.1, 0.2, -0.3, -0.1, 0.2, -2.2, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        static readonly double[,] _htnmWmm85 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -31.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -9.7, -19.9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 6.1, 1.3, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 1.3, 3.6, 2.5, 0.6, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -0.9, 0.6, 0.3, 2.4, -1.4, 0, 0, 0, 0, 0, 0, 0},
            {0, 0.7, -2.1, -1.4, -4.3, -0.7, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 1.2, 2, 2.6, 0.9, 0.8, 0.4, 0, 0, 0, 0, 0},
            {0, -0.6, -1.5, 0.1, -1.1, 0.4, -2, 0.9, 1.5, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        /* wmm90 constants */
        static readonly double[,] _gnmWmm90 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-29780.5, -1851.7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-2134.3, 3062.2, 1691.9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {1312.9, -2244.7, 1246.8, 808.6, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {933.5, 784.9, 323.5, -421.7, 139.2, 0, 0, 0, 0, 0, 0, 0, 0},
            {-208.3, 352.2, 246.5, -110.8, -162.3, -37.2, 0, 0, 0, 0, 0, 0, 0},
            {59, 63.7, 60, -181.3, 0.4, 15.4, -96, 0, 0, 0, 0, 0, 0},
            {76.1, -62.1, 1.3, 30.2, 4.7, 7.9, 10.1, 1.9, 0, 0, 0, 0, 0},
            {22.9, 2.3, -1.2, -11.7, -17.5, 2.2, 5.7, 3, -7, 0, 0, 0, 0},
            {3.6, 9.5, -0.9, -10.7, 10.7, -3.2, -1.4, 6.3, 0.8, -5.5, 0, 0, 0},
            {-3.3, -2.6, 4.5, -5.6, -3.6, 3.9, 3.2, 1.7, 3, 3.7, 0.7, 0, 0},
            {1.3, -1.4, -2.5, 3.2, 0.2, -1.1, 0.3, -0.3, 0.9, -1.1, 2.4, 3, 0},
            {-1.3, 0.1, 0.5, 0.7, 0.4, -0.2, -1.1, 0.9, -0.6, 0.8, 0.2, 0.4, 0.2}};

        static readonly double[,] _hnmWmm90 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 5407.2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -2278.3, -384.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -284.9, 291.7, -352.4, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 249.4, -232.7, 91.3, -296.5, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 40.8, 148.7, -154.6, -67.6, 97.4, 0, 0, 0, 0, 0, 0, 0},
            {0, -14.7, 82.2, 70, -56.2, -1.4, 24.6, 0, 0, 0, 0, 0, 0},
            {0, -78.6, -26.7, 0.1, 19.9, 17.9, -21.5, -6.8, 0, 0, 0, 0, 0},
            {0, 9.7, -19.3, 6.6, -20.1, 13.4, 9.8, -19, -9.1, 0, 0, 0, 0},
            {0, -21.9, 14.3, 9.5, -6.7, -6.4, 9.1, 8.9, -8, 2.1, 0, 0, 0},
            {0, 2.6, 1.2, 2.6, 5.7, -4, -0.4, -1.7, 3.8, -0.8, -6.5, 0, 0},
            {0, 0, 1, -1.6, -2.2, 1.1, -0.7, -1.7, -1.5, -1.3, -1.1, 0.6, 0},
            {0, 0.7, 0.7, 1.3, -1.5, 0.3, 0.2, -1.1, 1.2, -0.2, -1.3, 0.6, 0.6}};

        static readonly double[,] _gtnmWmm90 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {16, 9.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-11.7, 3.7, 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {2.1, -7.6, 0, -5.8, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-0.8, 1, -7.4, 0.8, -6.4, 0, 0, 0, 0, 0, 0, 0, 0},
            {1.7, 0, 0, -2.7, 0, 3, 0, 0, 0, 0, 0, 0, 0},
            {0.8, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0.5, 0, -0.9, 1.5, 2.7, -1, 0, 0, 0, 0, 0, 0, 0},
            {0, -1.1, 0, 0, -2.1, 0, 1, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        static readonly double[,] _htnmWmm90 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -13.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -12.8, -14.9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 3.1, 0.8, -11.3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 3.3, 3.7, 2.8, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, -2.1, 1.2, 1.2, 0.6, 0, 0, 0, 0, 0, 0, 0},
            {0, -0.6, -0.6, 0, -2.3, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0.6, 0.8, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 0},
            {0, 0.4, -0.8, 0.5, 0.3, 0.5, 0, -0.7, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

        /* wmm95 constants */
        static readonly double[,] _gnmWmm95 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-29682.1,-1782.2,0,0,0,0,0,0,0,0,0,0,0},
            {-2194.7,3078.6,1685.7,0,0,0,0,0,0,0,0,0,0},
            {1318.8,-2273.6,1246.9,766.3,0,0,0,0,0,0,0,0,0},
            {940,782.9,290.9,-418.9,113.8,0,0,0,0,0,0,0,0},
            {-209.5,354,238.2,-122.1,-162.8,-23.3,0,0,0,0,0,0,0},
            {68.5,65.6,64.1,-169.1,-0.5,16.5,-91,0,0,0,0,0,0},
            {78,-68.1,0.1,29.6,6,8.7,9.2,-2.4,0,0,0,0,0},
            {24.7,3.4,-1.5,-9.6,-16.5,2.6,3.6,-4.9,-8.5,0,0,0,0},
            {2.9,7.5,0.4,-10.3,9.7,-2.3,-2.4,6.8,-0.5,-6.5,0,0,0},
            {-2.9,-3.3,2.8,-4.3,-3.1,2.4,2.8,0.7,4.1,3.6,0.6,0,0},
            {1.7,-1.6,-3.6,1.2,-0.6,0.1,-0.7,-0.8,1.3,-0.3,2.2,4.2,0},
            {-1.8,0.9,-0.1,-0.5,0.8,0.2,0.5,0.4,-0.4,0.3,0.2,0.4,0.6}};

        static readonly double[,] _hnmWmm95 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0,5315.6,0,0,0,0,0,0,0,0,0,0,0},
            {0,-2359.1,-418.6,0,0,0,0,0,0,0,0,0,0},
            {0,-261.1,301,-416.5,0,0,0,0,0,0,0,0,0},
            {0,259.4,-230.9,99.8,-306.1,0,0,0,0,0,0,0,0},
            {0,43.7,157.6,-150.1,-59.2,104.4,0,0,0,0,0,0,0},
            {0,-15.2,74.3,69.4,-55.3,3,33.3,0,0,0,0,0,0},
            {0,-76.1,-24.5,1.6,20,16.5,-23.6,-6.8,0,0,0,0,0},
            {0,14.9,-19.5,6.3,-20.4,12.2,7,-19,-8.8,0,0,0,0},
            {0,-19.8,14.6,10.9,-7.5,-6.8,9.3,7.7,-8.1,2.6,0,0,0},
            {0,3.2,1.7,2.9,5.6,-3.4,-0.7,-2.9,2.3,-1.6,-6.6,0,0},
            {0,0.3,1,-3.6,-1.4,1.9,0.2,-1.3,-2.4,-0.6,-2.2,1.3,0},
            {0,0.3,1.4,0.8,-3,0.7,0.5,-0.8,0.6,0.1,-1.3,-0.4,0.9}};

        static readonly double[,] _gtnmWmm95 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {17.6,13.2,0,0,0,0,0,0,0,0,0,0,0},
            {-13.7,4,-0.3,0,0,0,0,0,0,0,0,0,0},
            {0.8,-6.6,-0.5,-8.5,0,0,0,0,0,0,0,0,0},
            {1.2,1.1,-6.8,0.3,-4.5,0,0,0,0,0,0,0,0},
            {0.9,0.5,-1.4,-1.7,0,2.1,0,0,0,0,0,0,0},
            {0.4,-0.3,0.3,2.1,0,-0.4,-0.4,0,0,0,0,0,0},
            {-0.3,-1.1,-0.5,0.5,1.3,0.1,0,-0.9,0,0,0,0,0},
            {0.1,0,0.4,0.3,-1.3,0.5,0.4,-0.9,0.1,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0}};

        static readonly double[,] _htnmWmm95 = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0,-18,0,0,0,0,0,0,0,0,0,0,0},
            {0,-14.6,-7.2,0,0,0,0,0,0,0,0,0,0},
            {0,4,2.2,-12.6,0,0,0,0,0,0,0,0,0},
            {0,1.3,1,2.5,-1.2,0,0,0,0,0,0,0,0},
            {0,0.5,1.5,0.6,1.7,0.6,0,0,0,0,0,0,0},
            {0,0.7,-1.5,-0.5,-0.7,1.1,2.6,0,0,0,0,0,0},
            {0,0.3,0,0.7,-0.6,0.1,-0.6,-0.4,0,0,0,0,0},
            {0,0.4,-0.3,0.1,0.8,-0.1,-1.3,-0.9,-1.1,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0}};

        static readonly double[,] _gnmWmm2000 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-29616.0, -1722.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-2266.7, 3070.2, 1677.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {1322.4, -2291.5, 1255.9, 724.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {932.1, 786.3, 250.6, -401.5, 106.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-211.9, 351.6, 220.8, -134.5, -168.8, -13.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {73.8, 68.2, 74.1, -163.5, -3.8, 17.1, -85.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {77.4, -73.9, 2.2, 35.7, 7.3, 5.2, 8.4, -1.5, 0.0, 0.0, 0.0, 0.0, 0.0},
            {23.3, 7.3, -8.5, -6.6, -16.9, 8.6, 4.9, -7.8, -7.6, 0.0, 0.0, 0.0, 0.0},
            {5.7, 8.5, 2.0, -9.8, 7.6, -7.0, -2.0, 9.2, -2.2, -6.6, 0.0, 0.0, 0.0},
            {-2.2, -5.7, 1.6, -3.7, -0.6, 4.1, 2.2, 2.2, 4.6, 2.3, 0.1, 0.0, 0.0},
            {3.3, -1.1, -2.4, 2.6, -1.3, -1.7, -0.6, 0.4, 0.7, -0.3, 2.3, 4.2, 0.0},
            {-1.5, -0.2, -0.3, 0.5, 0.2, 0.9, -1.4, 0.6, -0.6, -1.0, -0.3, 0.3, 0.4},
        };

        static readonly double[,] _hnmWmm2000 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 5194.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -2484.8, -467.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -224.7, 293.0, -486.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 273.3, -227.9, 120.9, -302.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 42.0, 173.8, -135.0, -38.6, 105.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -17.4, 61.2, 63.2, -62.9, 0.2, 43.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -62.3, -24.5, 8.9, 23.4, 15.0, -27.6, -7.8, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 12.4, -20.8, 8.4, -21.2, 15.5, 9.1, -15.5, -5.4, 0.0, 0.0, 0.0, 0.0},
            {0.0, -20.4, 13.9, 12.0, -6.2, -8.6, 9.4, 5.0, -8.4, 3.2, 0.0, 0.0, 0.0},
            {0.0, 0.9, -0.7, 3.9, 4.8, -5.3, -1.0, -2.4, 1.3, -2.3, -6.4, 0.0, 0.0},
            {0.0, -1.5, 0.7, -1.1, -2.3, 1.3, -0.6, -2.8, -1.6, -0.1, -1.9, 1.4, 0.0},
            {0.0, -1.0, 0.7, 2.2, -2.5, -0.2, 0.0, -0.2, 0.0, 0.2, -0.9, -0.2, 1.0},
        };

        static readonly double[,] _gtnmWmm2000 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {14.7, 11.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-13.6, -0.7, -1.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.3, -4.3, 0.9, -8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-1.6, 0.9, -7.6, 2.2, -3.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.9, -0.2, -2.5, -2.7, -0.9, 1.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {1.2, 0.2, 1.7, 1.6, -0.1, -0.3, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.4, -0.8, -0.2, 1.1, 0.4, 0.0, -0.2, -0.2, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.3, 0.6, -0.8, 0.3, -0.2, 0.5, 0.0, -0.6, 0.1, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        };

        static readonly double[,] _htnmWmm2000 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -20.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -21.5, -9.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 6.4, -1.3, -13.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 2.3, 0.7, 3.7, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 2.1, 2.3, 3.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -0.3, -1.7, -0.9, -1.0, -0.1, 1.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 1.4, 0.2, 0.7, 0.4, -0.3, -0.8, -0.1, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -0.5, 0.1, -0.2, 0.0, 0.1, -0.1, 0.3, 0.2, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        };

        static readonly double[,] _gnmIgrf2000 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-29615.0, -1728.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-2267.0, 3072.0, 1672.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {1341.0, -2290.0, 1253.0, 715.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {935.0, 787.0, 251.0, -405.0, 110.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-217.0, 351.0, 222.0, -131.0, -169.0, -12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {72.0, 68.0, 74.0, -161.0, -5.0, 17.0, -91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {79.0, -74.0, 0.0, 33.0, 9.0, 7.0, 8.0, -2.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {25.0, 6.0, -9.0, -8.0, -17.0, 9.0, 7.0, -8.0, -7.0, 0.0, 0.0, 0.0, 0.0},
            {5.0, 9.0, 3.0, -8.0, 6.0, -9.0, -2.0, 9.0, -4.0, -8.0, 0.0, 0.0, 0.0},
            {-2.0, -6.0, 2.0, -3.0, 0.0, 4.0, 1.0, 2.0, 4.0, 0.0, -1.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        };

        static readonly double[,] _hnmIgrf2000 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 5186.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -2478.0, -458.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -227.0, 296.0, -492.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 272.0, -232.0, 119.0, -304.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 44.0, 172.0, -134.0, -40.0, 107.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -17.0, 64.0, 65.0, -61.0, 1.0, 44.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -65.0, -24.0, 6.0, 24.0, 15.0, -25.0, -6.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 12.0, -22.0, 8.0, -21.0, 15.0, 9.0, -16.0, -3.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -20.0, 13.0, 12.0, -6.0, -8.0, 9.0, 4.0, -8.0, 5.0, 0.0, 0.0, 0.0},
            {0.0, 1.0, 0.0, 4.0, 5.0, -6.0, -1.0, -3.0, 0.0, -2.0, -8.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        };

        static readonly double[,] _gtnmIgrf2000 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {14.6, 10.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-12.4, 1.1, -1.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.7, -5.4, 0.9, -7.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-1.3, 1.6, -7.3, 2.9, -3.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -0.7, -2.1, -2.8, -0.8, 2.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {1.0, -0.4, 0.9, 2.0, -0.6, -0.3, 1.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.4, -0.4, -0.3, 1.1, 1.1, -0.2, 0.6, -0.9, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.3, 0.2, -0.3, 0.4, -1.0, 0.3, -0.5, -0.7, -0.4, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        };

        static readonly double[,] _htnmIgrf2000 = {
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -22.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -20.6, -9.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 6.0, -0.1, -14.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 2.1, 1.3, 5.0, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -0.1, 0.6, 1.7, 1.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, -0.2, -1.4, 0.0, -0.8, 0.0, 0.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 1.1, 0.0, 0.3, -0.1, -0.6, -0.7, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.1, 0.0, 0.0, 0.3, 0.6, -0.4, 0.3, 0.7, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        };

        /* wmm2005 constants */
        static readonly double[,] _gnmWmm2005 = {
            {     0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {-29556.8,  -1671.7,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            { -2340.6,   3046.9,   1657.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {  1335.4,  -2305.1,   1246.7,    674.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {   919.8,    798.1,    211.3,   -379.4,    100.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {  -227.4,    354.6,    208.7,   -136.5,   -168.3,    -14.1,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {    73.2,     69.7,     76.7,   -151.2,    -14.9,     14.6,    -86.3,      0.0,      0.0,      0.0,      0.0,      0.0,      0.0},
            {    80.1,    -74.5,     -1.4,     38.5,     12.4,      9.5,      5.7,      1.8,      0.0,      0.0,      0.0,      0.0,      0.0},
            {    24.9,      7.7,    -11.6,     -6.9,    -18.2,     10.0,      9.2,    -11.6,     -5.2,      0.0,      0.0,      0.0,      0.0},
            {     5.6,      9.9,      3.5,     -7.0,      5.1,    -10.8,     -1.3,      8.8,     -6.7,     -9.1,      0.0,      0.0,      0.0},
            {    -2.3,     -6.3,      1.6,     -2.6,      0.0,      3.1,      0.4,      2.1,      3.9,     -0.1,     -2.3,      0.0,      0.0},
            {     2.8,     -1.6,     -1.7,      1.7,     -0.1,      0.1,     -0.7,      0.7,      1.8,      0.0,      1.1,      4.1,      0.0},
            {    -2.4,     -0.4,      0.2,      0.8,     -0.3,      1.1,     -0.5,      0.4,     -0.3,     -0.3,     -0.1,     -0.3,     -0.1}
        };

        static readonly double[,] _hnmWmm2005 = {
            {   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0, 5079.8,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,-2594.7, -516.7,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0, -199.9,  269.3, -524.2,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,  281.5, -226.0,  145.8, -304.7,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,   42.4,  179.8, -123.0,  -19.5,  103.6,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,  -20.3,   54.7,   63.6,  -63.4,   -0.1,   50.4,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,  -61.5,  -22.4,    7.2,   25.4,   11.0,  -26.4,   -5.1,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   0.0,   11.2,  -21.0,    9.6,  -19.8,   16.1,    7.7,  -12.9,   -0.2,    0.0,    0.0,    0.0,    0.0},
            {   0.0,  -20.1,   12.9,   12.6,   -6.7,   -8.1,    8.0,    2.9,   -7.9,    6.0,    0.0,    0.0,    0.0},
            {   0.0,    2.4,    0.2,    4.4,    4.8,   -6.5,   -1.1,   -3.4,   -0.8,   -2.3,   -7.9,    0.0,    0.0},
            {   0.0,    0.3,    1.2,   -0.8,   -2.5,    0.9,   -0.6,   -2.7,   -0.9,   -1.3,   -2.0,   -1.2,    0.0},
            {   0.0,   -0.4,    0.3,    2.4,   -2.6,    0.6,    0.3,    0.0,    0.0,    0.3,   -0.9,   -0.4,    0.8}
        };

        static readonly double[,] _gtnmWmm2005 = {
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 8.0, 10.6,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {-15.1, -7.8, -0.8,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.4, -2.6, -1.2, -6.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {-2.5,  2.8, -7.0,  6.2, -3.8,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {-2.8,  0.7, -3.2, -1.1,  0.1, -0.8,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {-0.7,  0.4, -0.3,  2.3, -2.1, -0.6,  1.4,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.2, -0.1, -0.3,  1.1,  0.6,  0.5, -0.4,  0.6,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.1,  0.3, -0.4,  0.3, -0.3,  0.2,  0.4, -0.7,  0.4,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0}
        };

        static readonly double[,] _htnmWmm2005 = {
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -20.9,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -23.2, -14.6,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  5.0, -7.0, -0.6,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  2.2,  1.6,  5.8,  0.1,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  1.7,  2.1,  4.8, -1.1,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -0.6, -1.9, -0.4, -0.5, -0.3,  0.7,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.6,  0.4,  0.2,  0.3, -0.8, -0.2,  0.1,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -0.2,  0.1,  0.3,  0.4,  0.1, -0.2,  0.4,  0.4,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0}
        };

        /* igrf2005 constants */
        static readonly double[,] _gnmIgrf2005 = new double[14, 14]
        {
            {     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {-29556.8,-1671.8,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            { -2340.5, 3047.0, 1656.9,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {  1335.7,-2305.3, 1246.8,  674.4,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {   919.8,  798.2,  211.5, -379.5,  100.2,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {  -227.6,  354.4,  208.8, -136.6, -168.3,  -14.1,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {    72.9,   69.6,   76.6, -151.1,  -15.0,   14.7,  -86.4,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {    79.8,  -74.4,   -1.4,   38.6,   12.3,    9.4,    5.5,    2.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {    24.8,    7.7,  -11.4,   -6.8,  -18.0,   10.0,    9.4,  -11.4,   -5.0,    0.0,    0.0,    0.0,    0.0,    0.0},
            {     5.6,    9.8,    3.6,   -7.0,    5.0,  -10.8,   -1.3,    8.7,   -6.7,   -9.2,    0.0,    0.0,    0.0,    0.0},
            {    -2.2,   -6.3,    1.6,   -2.5,   -0.1,    3.0,    0.3,    2.1,    3.9,   -0.1,   -2.2,    0.0,    0.0,    0.0},
            {     2.9,   -1.6,   -1.7,    1.5,   -0.2,    0.2,   -0.7,    0.5,    1.8,    0.1,    1.0,    4.1,    0.0,    0.0},
            {    -2.2,   -0.3,    0.3,    0.9,   -0.4,    1.0,   -0.4,    0.5,   -0.3,   -0.4,    0.0,   -0.4,    0.0,    0.0},
            {    -0.2,   -0.9,    0.3,    0.3,   -0.4,    1.2,   -0.4,    0.7,   -0.3,    0.4,   -0.1,    0.4,   -0.1,   -0.3}
        };

        static readonly double[,] _hnmIgrf2005 = new double[14, 14]
        {
            {   0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {   0.0, 5080.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {   0.0, -2594.9, -516.7,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {   0.0, -200.4,269.3, -524.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {   0.0,281.4, -225.8,145.7, -304.7,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {   0.0, 42.7,179.8, -123.0,-19.5,103.6,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {   0.0,-20.2, 54.7, 63.7,-63.4,  0.0, 50.3,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {   0.0,-61.4,-22.5,  6.9, 25.4, 10.9,-26.4, -4.8,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            {   0.0, 11.2,-21.0,  9.7,-19.8, 16.1,  7.7,-12.8, -0.1,  0.0,  0.0,  0.0,  0.0,  0.0},
            {   0.0,-20.1, 12.9, 12.7, -6.7, -8.1,  8.1,  2.9, -7.9,  5.9,  0.0,  0.0,  0.0,  0.0},
            {   0.0,  2.4,  0.2,  4.4,  4.7, -6.5, -1.0, -3.4, -0.9, -2.3, -8.0,  0.0,  0.0,  0.0},
            {   0.0,  0.3,  1.4, -0.7, -2.4,  0.9, -0.6, -2.7, -1.0, -1.5, -2.0, -1.4,  0.0,  0.0},
            {   0.0, -0.5,  0.3,  2.3, -2.7,  0.6,  0.4,  0.0,  0.0,  0.3, -0.8, -0.4,  1.0,  0.0},
            {   0.0, -0.7,  0.3,  1.7, -0.5, -1.0,  0.0,  0.7,  0.2,  0.6,  0.4, -0.2, -0.5, -1.0}
        };

        static readonly double[,] _gtnmIgrf2005 = new double[14, 14]
        {
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            { 8.8,  10.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-15.0,  -6.9,  -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.3,  -3.1,  -0.9,  -6.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-2.5, 2.8,  -7.1, 5.9,  -3.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-2.6, 0.4,  -3.0,  -1.2, 0.2,  -0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.8, 0.2,  -0.2, 2.1,  -2.1,  -0.4, 1.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.4, 0.0,  -0.2, 1.1, 0.6, 0.4,  -0.5, 0.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            {-0.2, 0.2,  -0.2, 0.2,  -0.2, 0.2, 0.5,  -0.7, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0},
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
        };

        static readonly double[,] _htnmIgrf2005 = new double[14, 14]
        {
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -21.3,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -23.3, -14.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  5.4, -6.5, -2.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  2.0,  1.8,  5.6,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.1,  1.8,  2.0,  4.5, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -0.4, -1.9, -0.4, -0.4, -0.2,  0.9,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.8,  0.4,  0.1,  0.2, -0.9, -0.3,  0.3,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0, -0.2,  0.2,  0.2,  0.4,  0.2, -0.3,  0.5,  0.4,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
            { 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0}
        };

        static readonly double[,] _gnmWmm2010 = new double[13, 13] {
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {-29496.6,-1586.3,0,0,0,0,0,0,0,0,0,0,0},
            {-2396.6,3026.1,1668.6,0,0,0,0,0,0,0,0,0,0},
            {1340.1,-2326.2,1231.9,634,0,0,0,0,0,0,0,0,0},
            {912.6,808.9,166.7,-357.1,89.4,0,0,0,0,0,0,0,0},
            {-230.9,357.2,200.3,-141.1,-163,-7.8,0,0,0,0,0,0,0},
            {72.8,68.6,76,-141.4,-22.8,13.2,-77.9,0,0,0,0,0,0},
            {80.5,-75.1,-4.7,45.3,13.9,10.4,1.7,4.9,0,0,0,0,0},
            {24.4,8.1,-14.5,-5.6,-19.3,11.5,10.9,-14.1,-3.7,0,0,0,0},
            {5.4,9.4,3.4,-5.2,3.1,-12.4,-0.7,8.4,-8.5,-10.1,0,0,0},
            {-2,-6.3,0.9,-1.1,-0.2,2.5,-0.3,2.2,3.1,-1,-2.8,0,0},
            {3,-1.5,-2.1,1.7,-0.5,0.5,-0.8,0.4,1.8,0.1,0.7,3.8,0},
            {-2.2,-0.2,0.3,1,-0.6,0.9,-0.1,0.5,-0.4,-0.4,0.2,-0.8,0}
        };

        static readonly double[,] _hnmWmm2010 = new double[13, 13]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,4944.4,0,0,0,0,0,0,0,0,0,0,0},
            {0,-2707.7,-576.1,0,0,0,0,0,0,0,0,0,0},
            {0,-160.2,251.9,-536.6,0,0,0,0,0,0,0,0,0},
            {0,286.4,-211.2,164.3,-309.1,0,0,0,0,0,0,0,0},
            {0,44.6,188.9,-118.2,0,100.9,0,0,0,0,0,0,0},
            {0,-20.8,44.1,61.5,-66.3,3.1,55,0,0,0,0,0,0},
            {0,-57.9,-21.1,6.5,24.9,7,-27.7,-3.3,0,0,0,0,0},
            {0,11,-20,11.9,-17.4,16.7,7,-10.8,1.7,0,0,0,0},
            {0,-20.5,11.5,12.8,-7.2,-7.4,8,2.1,-6.1,7,0,0,0},
            {0,2.8,-0.1,4.7,4.4,-7.2,-1,-3.9,-2,-2,-8.3,0,0},
            {0,0.2,1.7,-0.6,-1.8,0.9,-0.4,-2.5,-1.3,-2.1,-1.9,-1.8,0},
            {0,-0.9,0.3,2.1,-2.5,0.5,0.6,0,0.1,0.3,-0.9,-0.2,0.9}
        };

        static readonly double[,] _gtnmWmm2010 = new double[13, 13]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {11.6,16.5,0,0,0,0,0,0,0,0,0,0,0},
            {-12.1,-4.4,1.9,0,0,0,0,0,0,0,0,0,0},
            {0.4,-4.1,-2.9,-7.7,0,0,0,0,0,0,0,0,0},
            {-1.8,2.3,-8.7,4.6,-2.1,0,0,0,0,0,0,0,0},
            {-1,0.6,-1.8,-1,0.9,1,0,0,0,0,0,0,0},
            {-0.2,-0.2,-0.1,2,-1.7,-0.3,1.7,0,0,0,0,0,0},
            {0.1,-0.1,-0.6,1.3,0.4,0.3,-0.7,0.6,0,0,0,0,0},
            {-0.1,0.1,-0.6,0.2,-0.2,0.3,0.3,-0.6,0.2,0,0,0,0},
            {0,-0.1,0,0.3,-0.4,-0.3,0.1,-0.1,-0.4,-0.2,0,0,0},
            {0,0,-0.1,0.2,0,-0.1,-0.2,0,-0.1,-0.2,-0.2,0,0},
            {0,0,0,0.1,0,0,0,0,0,0,-0.1,0,0},
            {0,0,0.1,0.1,-0.1,0,0,0,0,0,0,-0.1,0.1}
        };

        static readonly double[,] _htnmWmm2010 = new double[13, 13]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,-25.9,0,0,0,0,0,0,0,0,0,0,0},
            {0,-22.5,-11.8,0,0,0,0,0,0,0,0,0,0},
            {0,7.3,-3.9,-2.6,0,0,0,0,0,0,0,0,0},
            {0,1.1,2.7,3.9,-0.8,0,0,0,0,0,0,0,0},
            {0,0.4,1.8,1.2,4,-0.6,0,0,0,0,0,0,0},
            {0,-0.2,-2.1,-0.4,-0.6,0.5,0.9,0,0,0,0,0,0},
            {0,0.7,0.3,-0.1,-0.1,-0.8,-0.3,0.3,0,0,0,0,0},
            {0,-0.1,0.2,0.4,0.4,0.1,-0.1,0.4,0.3,0,0,0,0},
            {0,0,-0.2,0,-0.1,0.1,0,-0.2,0.3,0.2,0,0,0},
            {0,0.1,-0.1,0,-0.1,-0.1,0,-0.1,-0.2,0,-0.1,0,0},
            {0,0,0.1,0,0.1,0,0.1,0,-0.1,-0.1,0,-0.1,0},
            {0,0,0,0,0,0,0.1,0,0,0,0,0,0}
        };

        static readonly double[,] _gnmIgrf2010 = new double[14, 14]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {-29496.5,-1585.9,0,0,0,0,0,0,0,0,0,0,0,0},
            {-2396.6,3026,1668.6,0,0,0,0,0,0,0,0,0,0,0},
            {1339.7,-2326.3,1231.7,634.2,0,0,0,0,0,0,0,0,0,0},
            {912.6,809,166.6,-357.1,89.7,0,0,0,0,0,0,0,0,0},
            {-231.1,357.2,200.3,-141.2,-163.1,-7.7,0,0,0,0,0,0,0,0},
            {72.8,68.6,76,-141.4,-22.9,13.1,-77.9,0,0,0,0,0,0,0},
            {80.4,-75,-4.7,45.3,14,10.4,1.6,4.9,0,0,0,0,0,0},
            {24.3,8.2,-14.5,-5.7,-19.3,11.6,10.9,-14.1,-3.7,0,0,0,0,0},
            {5.4,9.4,3.4,-5.3,3.1,-12.4,-0.8,8.4,-8.4,-10.1,0,0,0,0},
            {-2,-6.3,0.9,-1.1,-0.2,2.5,-0.3,2.2,3.1,-1,-2.8,0,0,0},
            {3,-1.5,-2.1,1.6,-0.5,0.5,-0.8,0.4,1.8,0.2,0.8,3.8,0,0},
            {-2.1,-0.2,0.3,1,-0.7,0.9,-0.1,0.5,-0.4,-0.4,0.2,-0.8,0,0},
            {-0.2,-0.9,0.3,0.4,-0.4,1.1,-0.3,0.8,-0.2,0.4,0,0.4,-0.3,0}
        };

        static readonly double[,] _hnmIgrf2010 = new double[14, 14]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,4945.1,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,-2707.7,-575.4,0,0,0,0,0,0,0,0,0,0,0},
            {0,-160.5,251.7,-536.8,0,0,0,0,0,0,0,0,0,0},
            {0,286.4,-211.2,164.4,-309.2,0,0,0,0,0,0,0,0,0},
            {0,44.7,188.9,-118.1,0.1,100.9,0,0,0,0,0,0,0,0},
            {0,-20.8,44.2,61.5,-66.3,3.1,54.9,0,0,0,0,0,0,0},
            {0,-57.8,-21.2,6.6,24.9,7,-27.7,-3.4,0,0,0,0,0,0},
            {0,10.9,-20,11.9,-17.4,16.7,7.1,-10.8,1.7,0,0,0,0,0},
            {0,-20.5,11.6,12.8,-7.2,-7.4,8,2.2,-6.1,7,0,0,0,0},
            {0,2.8,-0.1,4.7,4.4,-7.2,-1,-4,-2,-2,-8.3,0,0,0},
            {0,0.1,1.7,-0.6,-1.8,0.9,-0.4,-2.5,-1.3,-2.1,-1.9,-1.8,0,0},
            {0,-0.8,0.3,2.2,-2.5,0.5,0.6,0,0.1,0.3,-0.9,-0.2,0.8,0},
            {0,-0.8,0.3,1.7,-0.6,-1.2,-0.1,0.5,0.1,0.5,0.4,-0.2,-0.5,0}
        };

        static readonly double[,] _gtnmIgrf2010 = new double[14, 14]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {11.4,16.7,0,0,0,0,0,0,0,0,0,0,0,0},
            {-11.3,-3.9,2.7,0,0,0,0,0,0,0,0,0,0,0},
            {1.3,-3.9,-2.9,-8.1,0,0,0,0,0,0,0,0,0,0},
            {-1.4,2,-8.9,4.4,-2.3,0,0,0,0,0,0,0,0,0},
            {-0.5,0.5,-1.5,-0.7,1.3,1.4,0,0,0,0,0,0,0,0},
            {-0.3,-0.3,-0.3,1.9,-1.6,-0.2,1.8,0,0,0,0,0,0,0},
            {0.2,-0.1,-0.6,1.4,0.3,0.1,-0.8,0.4,0,0,0,0,0,0},
            {-0.1,0.1,-0.5,0.3,-0.3,0.3,0.2,-0.5,0.2,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        };

        static readonly double[,] _htnmIgrf2010 = new double[14, 14]{
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,-28.8,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,-23,-12.9,0,0,0,0,0,0,0,0,0,0,0},
            {0,8.6,-2.9,-2.1,0,0,0,0,0,0,0,0,0,0},
            {0,0.4,3.2,3.6,-0.8,0,0,0,0,0,0,0,0,0},
            {0,0.5,1.5,0.9,3.7,-0.6,0,0,0,0,0,0,0,0},
            {0,-0.1,-2.1,-0.4,-0.5,0.8,0.5,0,0,0,0,0,0,0},
            {0,0.6,0.3,-0.2,-0.1,-0.8,-0.3,0.2,0,0,0,0,0,0},
            {0,0,0.2,0.5,0.4,0.1,-0.1,0.4,0.4,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        };

        static readonly double[,] _gnmWmm2015 = new double[13, 13] {
            {         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {  -29438.5,   -1501.1,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {   -2445.3,    3012.5,    1676.6,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {    1351.1,   -2352.3,    1225.6,     581.9,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {     907.2,     813.7,     120.3,      -335,      70.3,         0,         0,         0,         0,         0,         0,         0,         0,},
            {    -232.6,     360.1,     192.4,      -141,    -157.4,       4.3,         0,         0,         0,         0,         0,         0,         0,},
            {      69.5,      67.4,      72.8,    -129.8,       -29,      13.2,     -70.9,         0,         0,         0,         0,         0,         0,},
            {      81.6,     -76.1,      -6.8,      51.9,        15,       9.3,      -2.8,       6.7,         0,         0,         0,         0,         0,},
            {        24,       8.6,     -16.9,      -3.2,     -20.6,      13.3,      11.7,       -16,        -2,         0,         0,         0,         0,},
            {       5.4,       8.8,       3.1,      -3.1,       0.6,     -13.3,      -0.1,       8.7,      -9.1,     -10.5,         0,         0,         0,},
            {      -1.9,      -6.5,       0.2,       0.6,      -0.6,       1.7,      -0.7,       2.1,       2.3,      -1.8,      -3.6,         0,         0,},
            {       3.1,      -1.5,      -2.3,       2.1,      -0.9,       0.6,      -0.7,       0.2,       1.7,      -0.2,       0.4,       3.5,         0,},
            {        -2,      -0.3,       0.4,       1.3,      -0.9,       0.9,       0.1,       0.5,      -0.4,      -0.4,       0.2,      -0.9,         0,},
        };

        static readonly double[,] _hnmWmm2015 = new double[13, 13]{
            {         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {         0,    4796.2,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {         0,   -2845.6,      -642,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {         0,    -115.3,       245,    -538.3,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {         0,     283.4,    -188.6,     180.9,    -329.5,         0,         0,         0,         0,         0,         0,         0,         0,},
            {         0,      47.4,     196.9,    -119.4,      16.1,     100.1,         0,         0,         0,         0,         0,         0,         0,},
            {         0,     -20.7,      33.2,      58.8,     -66.5,       7.3,      62.5,         0,         0,         0,         0,         0,         0,},
            {         0,     -54.1,     -19.4,       5.6,      24.4,       3.3,     -27.5,      -2.3,         0,         0,         0,         0,         0,},
            {         0,      10.2,     -18.1,      13.2,     -14.6,      16.2,       5.7,      -9.1,       2.2,         0,         0,         0,         0,},
            {         0,     -21.6,      10.8,      11.7,      -6.8,      -6.9,       7.8,         1,      -3.9,       8.5,         0,         0,         0,},
            {         0,       3.3,      -0.3,       4.6,       4.4,      -7.9,      -0.6,      -4.1,      -2.8,      -1.1,      -8.7,         0,         0,},
            {         0,      -0.1,       2.1,      -0.7,      -1.1,       0.7,      -0.2,      -2.1,      -1.5,      -2.5,        -2,      -2.3,         0,},
            {         0,        -1,       0.5,       1.8,      -2.2,       0.3,       0.7,      -0.1,       0.3,       0.2,      -0.9,      -0.2,       0.7,},
        };

        static readonly double[,] _gtnmWmm2015 = new double[13, 13]{
            {         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {      10.7,      17.9,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {      -8.6,      -3.3,       2.4,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {       3.1,      -6.2,      -0.4,     -10.4,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {      -0.4,       0.8,      -9.2,         4,      -4.2,         0,         0,         0,         0,         0,         0,         0,         0,},
            {      -0.2,       0.1,      -1.4,         0,       1.3,       3.8,         0,         0,         0,         0,         0,         0,         0,},
            {      -0.5,      -0.2,      -0.6,       2.4,      -1.1,       0.3,       1.5,         0,         0,         0,         0,         0,         0,},
            {       0.2,      -0.2,      -0.4,       1.3,       0.2,      -0.4,      -0.9,       0.3,         0,         0,         0,         0,         0,},
            {         0,       0.1,      -0.5,       0.5,      -0.2,       0.4,       0.2,      -0.4,       0.3,         0,         0,         0,         0,},
            {         0,      -0.1,      -0.1,       0.4,      -0.5,      -0.2,       0.1,         0,      -0.2,      -0.1,         0,         0,         0,},
            {         0,         0,      -0.1,       0.3,      -0.1,      -0.1,      -0.1,         0,      -0.2,      -0.1,      -0.2,         0,         0,},
            {         0,         0,      -0.1,       0.1,         0,         0,         0,         0,         0,         0,      -0.1,      -0.1,         0,},
            {       0.1,         0,         0,       0.1,      -0.1,         0,       0.1,         0,         0,         0,         0,         0,         0,},
        };

        static readonly double[,] _htnmWmm2015 = {
            {         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {         0,     -26.8,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {         0,     -27.1,     -13.3,         0,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {         0,       8.4,      -0.4,       2.3,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
            {         0,      -0.6,       5.3,         3,      -5.3,         0,         0,         0,         0,         0,         0,         0,         0,},
            {         0,       0.4,       1.6,      -1.1,       3.3,       0.1,         0,         0,         0,         0,         0,         0,         0,},
            {         0,         0,      -2.2,      -0.7,       0.1,         1,       1.3,         0,         0,         0,         0,         0,         0,},
            {         0,       0.7,       0.5,      -0.2,      -0.1,      -0.7,       0.1,       0.1,         0,         0,         0,         0,         0,},
            {         0,      -0.3,       0.3,       0.3,       0.6,      -0.1,      -0.2,       0.3,         0,         0,         0,         0,         0,},
            {         0,      -0.2,      -0.1,      -0.2,       0.1,       0.1,         0,      -0.2,       0.4,       0.3,         0,         0,         0,},
            {         0,       0.1,      -0.1,         0,         0,      -0.2,       0.1,      -0.1,      -0.2,       0.1,      -0.1,         0,         0,},
            {         0,         0,       0.1,         0,       0.1,         0,         0,       0.1,         0,      -0.1,         0,      -0.1,         0,},
            {         0,         0,         0,      -0.1,         0,         0,         0,         0,         0,         0,         0,         0,         0,},
        };


        #endregion

        static readonly double[] _root = new double[13];
        static readonly double[,,] _roots = new double[13, 13, 2];


        /// <summary>
        /// Converts <see cref="DateTimeOffset"/> to Julian Day 
        /// </summary>
        /// <param name="date"><see cref="DateTimeOffset"/></param>
        /// <returns>Julian Day</returns>
        public static long GetJulianDayFromDateTimeOffset(DateTimeOffset date)
        {
            var y = date.ToUniversalTime().Year;
            var m = date.ToUniversalTime().Month;
            var d = date.ToUniversalTime().Day;

            // https://en.wikipedia.org/wiki/Julian_day#Converting_Gregorian_calendar_date_to_Julian_Day_Number
            return (1461 * (y + 4800 + (m - 14) / 12)) / 4 + (367 * (m - 2 - 12 * ((m - 14) / 12))) / 12 - (3 * ((y + 4900 + (m - 14) / 12) / 100)) / 4 + d - 32075;
        }

        static bool _beenHere;

        /// <summary>
        /// Cache dictionary
        /// </summary>
        private static readonly Dictionary<Tuple<CoordinatePoint, long>, double> AllreadyCalculatedMagneticVariation = new Dictionary<Tuple<CoordinatePoint, long>, double>();

        /// <summary>
        /// Get magnetic variation (in radians) given <see cref="CoordinatePoint"/> altitude(km) and date.
        /// </summary>
        /// <param name="point"><see cref="CoordinatePoint"/></param>
        /// <param name="coordinatesDegreesAccuracy">Number of digits to round.</param>
        /// <param name="altitude">Altitude in km.</param>
        /// <param name="date"><see cref="DateTimeOffset"/>.</param>
        /// <param name="model"><see cref="MagneticVariationModels"/> to use for calculation.</param>
        /// <param name="fields">Output fields are B_r,B_th,B_phi,B_x,B_y,B_z.</param>
        /// <returns>Magnetic variation in radians.</returns>
        public static double GetMagneticVariation(CoordinatePoint point, int coordinatesDegreesAccuracy, double altitude, DateTimeOffset date,
            MagneticVariationModels model, out double[] fields)
        {
            var roundedLatitudeDegrees = Math.Round(point.Latitude.ToDegrees(), coordinatesDegreesAccuracy);
            var roundedLongitudeDegrees = Math.Round(point.Longitude.ToDegrees(), coordinatesDegreesAccuracy);

            var roundedLatitude = Latitude.FromDegrees(roundedLatitudeDegrees);
            var roundedLongitude = Longitude.FromDegrees(roundedLongitudeDegrees);
            var julianDays = GetJulianDayFromDateTimeOffset(date);

            var dictionaryKey = new Tuple<CoordinatePoint, long>(new CoordinatePoint(roundedLatitude, roundedLongitude), julianDays);

            // return empty fields from cache
            fields = new double[] { };

            if (AllreadyCalculatedMagneticVariation.TryGetValue(dictionaryKey, out var cachedMagVariationValue))
            {
                return cachedMagVariationValue;
            }

            var calculatedMagneticVariation = GetMagneticVariation(roundedLatitude.ToRadians(), roundedLongitude.ToRadians(), altitude, date, model, out fields);
            AllreadyCalculatedMagneticVariation.Add(dictionaryKey, calculatedMagneticVariation);
            return calculatedMagneticVariation;
        }

        /* 
         * Return variation (in radians) given geodetic latitude (radians), longitude
         * (radians) ,height (km) and (Julian) date.
         */
        /// <summary>
        /// Get magnetic variation (in radians) given geodetic latitude, longitude, height(km) and date.
        /// </summary>
        /// <param name="latitudeRadians">Latitude in radians.</param>
        /// <param name="longitudeRadians">Longitude in radians.</param>
        /// <param name="altitude">Altitude in km.</param>
        /// <param name="date"><see cref="DateTimeOffset"/>.</param>
        /// <param name="model"><see cref="MagneticVariationModels"/> to use for calculation.</param>
        /// <param name="fields">Output fields are B_r,B_th,B_phi,B_x,B_y,B_z.</param>
        /// <returns>Magnetic variation in radians.</returns>
        public static double GetMagneticVariation(double latitudeRadians, double longitudeRadians, double altitude, DateTimeOffset date, MagneticVariationModels model, out double[] fields)
        {

            const int nmax = 12;
            var p = new double[13, 13];
            var dp = new double[13, 13];
            var gnm = new double[13, 13];
            var hnm = new double[13, 13];
            var sm = new double[13];
            var cm = new double[13];

            var dat = GetJulianDayFromDateTimeOffset(date);

            /* output fields are B_r,B_th,B_phi,B_x,B_y,B_z */
            int n, m;
            double yearfrac, bR, bTheta, bPhi, x, y, z;
            double invS;

            /* convert to geocentric */
            var sr = Math.Sqrt(Math.Pow(_earthEquatorialRadius, 2) * Math.Pow(Math.Cos(latitudeRadians), 2) + Math.Pow(_earthWPolarRadius, 2) * Math.Pow(Math.Sin(latitudeRadians), 2));
            /* sr is effective radius */
            var theta = Math.Atan2(Math.Cos(latitudeRadians) * (altitude * sr + Math.Pow(_earthEquatorialRadius, 2)), Math.Sin(latitudeRadians) * (altitude * sr + Math.Pow(_earthWPolarRadius, 2)));

            /* theta is geocentric co-latitude */

            var r = Math.Pow(altitude, 2) + 2 * altitude * sr + (Math.Pow(_earthEquatorialRadius, 4) - (Math.Pow(_earthEquatorialRadius, 4) - Math.Pow(_earthWPolarRadius, 4)) * Math.Pow(Math.Sin(latitudeRadians), 2)) /
                       (Math.Pow(_earthEquatorialRadius, 2) - (Math.Pow(_earthEquatorialRadius, 2) - Math.Pow(_earthWPolarRadius, 2)) * Math.Pow(Math.Sin(latitudeRadians), 2));

            r = Math.Sqrt(r);
            /* r is geocentric radial distance */

            /* protect against zero divide at geographic poles */
            //inv_s =  1.0 / (Math.Sin(theta) +(Math.Sin(theta) == 0.0)*1.0e-8); 
            if (Math.Sin(theta) == 0)
                invS = 1.0 / (Math.Sin(theta) + 1 * 1.0e-8);
            else
                invS = 1.0 / (Math.Sin(theta) + 0 * 1.0e-8);

            /*zero out arrays */
            for (n = 0; n <= nmax; n++)
            {
                for (m = 0; m <= n; m++)
                {
                    p[n, m] = 0;
                    dp[n, m] = 0;
                }
            }

            /* diagonal elements */
            p[0, 0] = 1;
            p[1, 1] = Math.Sin(theta);
            dp[0, 0] = 0;
            dp[1, 1] = Math.Cos(theta);
            p[1, 0] = Math.Cos(theta);
            dp[1, 0] = -Math.Sin(theta);

            /* these values will not change for subsequent function calls */
            if (!_beenHere)
            {
                for (n = 2; n <= nmax; n++)
                {
                    _root[n] = Math.Sqrt((2.0 * n - 1) / (2.0 * n));
                }

                for (m = 0; m <= nmax; m++)
                {
                    double mm = m * m;
                    for (n = Math.Max(m + 1, 2); n <= nmax; n++)
                    {
                        _roots[m, n, 0] = Math.Sqrt((n - 1) * (n - 1) - mm);
                        _roots[m, n, 1] = 1.0 / Math.Sqrt(n * n - mm);
                    }
                }
                _beenHere = true;
            }

            for (n = 2; n <= nmax; n++)
            {
                /*  double root = sqrt((2.0*n-1) / (2.0*n)); */
                p[n, n] = p[n - 1, n - 1] * Math.Sin(theta) * _root[n];
                dp[n, n] = (dp[n - 1, n - 1] * Math.Sin(theta) + p[n - 1, n - 1] * Math.Cos(theta)) * _root[n];
            }

            /* lower triangle */
            for (m = 0; m <= nmax; m++)
            {
                /*  double mm = m*m;  */
                for (n = Math.Max(m + 1, 2); n <= nmax; n++)
                {
                    /* double root1 = sqrt((n-1)*(n-1) - mm); */
                    /* double root2 = 1.0 / sqrt( n*n - mm);  */
                    p[n, m] = (p[n - 1, m] * Math.Cos(theta) * (2.0 * n - 1) -
                           p[n - 2, m] * _roots[m, n, 0]) * _roots[m, n, 1];
                    dp[n, m] = ((dp[n - 1, m] * Math.Cos(theta) - p[n - 1, m] * Math.Sin(theta)) *
                            (2.0 * n - 1) - dp[n - 2, m] * _roots[m, n, 0]) * _roots[m, n, 1];
                }
            }

            /* compute gnm, hnm at dat */
            var nmaxl = 12;
            switch (model)
            {
                case MagneticVariationModels.IGRF90: /* IGRF90 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(1990, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;

                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmIgrf90[n, m] + yearfrac * _gtnmIgrf90[n, m];
                            hnm[n, m] = _hnmIgrf90[n, m] + yearfrac * _htnmIgrf90[n, m];
                        }
                    break;

                case MagneticVariationModels.WMM85: /* WMM85 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(1985, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmWmm85[n, m] + yearfrac * _gtnmWmm85[n, m];
                            hnm[n, m] = _hnmWmm85[n, m] + yearfrac * _htnmWmm85[n, m];
                        }
                    break;

                case MagneticVariationModels.WMM90: /* WMM90 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(1990, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmWmm90[n, m] + yearfrac * _gtnmWmm90[n, m];
                            hnm[n, m] = _hnmWmm90[n, m] + yearfrac * _htnmWmm90[n, m];
                        }
                    break;

                case MagneticVariationModels.WMM95: /* WMM95 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(1995, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmWmm95[n, m] + yearfrac * _gtnmWmm95[n, m];
                            hnm[n, m] = _hnmWmm95[n, m] + yearfrac * _htnmWmm95[n, m];
                        }
                    break;
                case MagneticVariationModels.IGRF95: /* IGRF95 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(1995, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmIgrf95[n, m] + yearfrac * _gtnmIgrf95[n, m];
                            hnm[n, m] = _hnmIgrf95[n, m] + yearfrac * _htnmIgrf95[n, m];
                        }
                    break;
                case MagneticVariationModels.WMM2000:      /* WMM2000 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(2000, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmWmm2000[n, m] + yearfrac * _gtnmWmm2000[n, m];
                            hnm[n, m] = _hnmWmm2000[n, m] + yearfrac * _htnmWmm2000[n, m];
                        }
                    break;
                case MagneticVariationModels.IGRF2000:      /* IGRF2000 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(2000, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmIgrf2000[n, m] + yearfrac * _gtnmIgrf2000[n, m];
                            hnm[n, m] = _hnmIgrf2000[n, m] + yearfrac * _htnmIgrf2000[n, m];
                        }
                    break;
                case MagneticVariationModels.WMM2005:      /* WMM2005 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(2005, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmWmm2005[n, m] + yearfrac * _gtnmWmm2005[n, m];
                            hnm[n, m] = _hnmWmm2005[n, m] + yearfrac * _htnmWmm2005[n, m];
                        }
                    break;
                case MagneticVariationModels.IGRF2005:      /* IGRF2005 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(2005, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;
                    nmaxl = 13;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmIgrf2005[n, m] + yearfrac * _gtnmIgrf2005[n, m];
                            hnm[n, m] = _hnmIgrf2005[n, m] + yearfrac * _htnmIgrf2005[n, m];
                        }
                    break;
                case MagneticVariationModels.WMM2010:      /* WMM2010 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(2010, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmWmm2010[n, m] + yearfrac * _gtnmWmm2010[n, m];
                            hnm[n, m] = _hnmWmm2010[n, m] + yearfrac * _htnmWmm2010[n, m];
                        }
                    break;
                case MagneticVariationModels.IGRF2010:      /* IGRF2010 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(2010, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;
                    nmaxl = 14;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmIgrf2010[n, m] + yearfrac * _gtnmIgrf2010[n, m];
                            hnm[n, m] = _hnmIgrf2010[n, m] + yearfrac * _htnmIgrf2010[n, m];
                        }
                    break;

                case MagneticVariationModels.WMM2015:      /* WMM2015 */
                    yearfrac = (dat - GetJulianDayFromDateTimeOffset(new DateTimeOffset(2015, 1, 1, 0, 0, 0, 0, TimeSpan.Zero))) / 365.25;
                    for (n = 1; n <= nmaxl; n++)
                        for (m = 0; m <= nmaxl; m++)
                        {
                            gnm[n, m] = _gnmWmm2015[n, m] + yearfrac * _gtnmWmm2015[n, m];
                            hnm[n, m] = _hnmWmm2015[n, m] + yearfrac * _htnmWmm2015[n, m];
                        }
                    break;

                default:
                    throw new ArgumentOutOfRangeException(nameof(model), model, null);
            }

            /* compute sm (sin(m lon) and cm (cos(m lon)) */
            for (m = 0; m <= nmaxl; m++)
            {
                sm[m] = Math.Sin(m * longitudeRadians);
                cm[m] = Math.Cos(m * longitudeRadians);
            }

            /* compute B fields */
            bR = 0.0;
            bTheta = 0.0;
            bPhi = 0.0;
            var fn = Math.Pow(_earthMeanRadius / r, 2);

            for (n = 1; n <= nmaxl; n++)
            {
                double c1N = 0;
                double c2N = 0;
                double c3N = 0;
                for (m = 0; m <= n; m++)
                {
                    var tmp = gnm[n, m] * cm[m] + hnm[n, m] * sm[m];
                    c1N += tmp * p[n, m];
                    c2N += tmp * dp[n, m];
                    c3N += m * (gnm[n, m] * sm[m] - hnm[n, m] * cm[m]) * p[n, m];
                }
                /* fn=pow(r_0/r,n+2.0);   */
                fn *= _earthMeanRadius / r;
                bR += (n + 1) * c1N * fn;
                bTheta -= c2N * fn;
                bPhi += c3N * fn * invS;
            }


            /* Find geodetic field components: */
            var psi = theta - (Math.PI / 2.0 - latitudeRadians);

            x = -bTheta * Math.Cos(psi) - bR * Math.Sin(psi);
            y = bPhi;
            z = bTheta * Math.Sin(psi) - bR * Math.Cos(psi);

            fields = new double[6];
            fields[0] = bR;
            fields[1] = bTheta;
            fields[2] = bPhi;
            fields[3] = x;
            fields[4] = y;
            fields[5] = z;   /* output fields */
                             /* find variation in radians */
                             /* return zero variation at magnetic pole X=Y=0. */
                             /* E is positive */
            return x != 0.0 || y != 0.0 ? Math.Atan2(y, x) : (double)0.0;
        }
    }

    public class WmmCofParcer
    {
        /// <summary>
        /// converts WMM.COF file to inner coeff array and write it back to other file
        /// </summary>
        /// <param name="filename">WMM.COF filename</param>
        public static void ConvertFromCofToArrays(string filename)
        {
            if (filename.Length == 0) throw new ArgumentOutOfRangeException(nameof(filename));
            var cof = File.ReadAllLines(filename);

            var gnmWmm = new double[13, 13];
            var hnmWmm = new double[13, 13];
            var gtnmWmm = new double[13, 13];
            var htnmWmm = new double[13, 13];

            //skip first and two last lines in file 
            for (var i = 1; i < cof.Length - 2; i++)
            {
                var values = new List<double>();
                var substrings = cof[i].Split(' ').Where(substring => substring != "").ToArray();
                foreach (var substring in substrings)
                {
                    if (double.TryParse(substring, NumberStyles.Number, CultureInfo.InvariantCulture, out var val)) values.Add(val);
                }

                gnmWmm[(int)values[0], (int)values[1]] = values[2];
                hnmWmm[(int)values[0], (int)values[1]] = values[3];
                gtnmWmm[(int)values[0], (int)values[1]] = values[4];
                htnmWmm[(int)values[0], (int)values[1]] = values[5];
            }

            File.AppendAllText("OutArrays.txt", "gnm_wmm");
            File.AppendAllLines("OutArrays.txt", ArrayToStrings(gnmWmm));
            File.AppendAllText("OutArrays.txt", "hnm_wmm");
            File.AppendAllLines("OutArrays.txt", ArrayToStrings(hnmWmm));
            File.AppendAllText("OutArrays.txt", "gtnm_wmm");
            File.AppendAllLines("OutArrays.txt", ArrayToStrings(gtnmWmm));
            File.AppendAllText("OutArrays.txt", "htnm_wmm");
            File.AppendAllLines("OutArrays.txt", ArrayToStrings(htnmWmm));

        }

        private static List<string> ArrayToStrings(double[,] array)
        {
            var strings = new List<string>();
            for (var i = 0; i < array.GetLength(0); i++)
            {
                var newString = "{";
                for (var j = 0; j < array.GetLength(1); j++)
                {
                    newString += $"{array[i, j].ToString(CultureInfo.InvariantCulture).Replace(",", "."),10},";
                }
                newString += "},";
                strings.Add(newString);
            }
            return strings;
        }
    }
}
